---
draft: true
---



maze generate app godot

# plan

start with 3d camera floating about the world-bits

add maze generation

create player that WASD around

do a congrats screen thing

# 3d scene

createing project predictably dumb :)

startup - new 3d scene

add camera

save and launch; skybox!

move camer a bit

add box

texture and material - i can see box!

put it into a prefab

# maze generation

## cell floors

i attached a script

i needed/added a `export (PackedScene) var main_grass`

now i can link the THINGS 


... mayube ... don't see how to ref things in the scnee, but, this can be pointed at the prefab 


instantiating is simple ... once you recall that you must attach it

```godot
	var made = main_grass_prefab.instance()
	add_child(made)
```
... or ...

```
	for i in maze_size:
		for j in maze_size:
			var made = main_grass_prefab.instance()
			add_child(made)
			
			print('do cell ['+str(i)+','+str(j)+']')
```

... okay; there's a `.translate(` method

```

			made.translate(Vector3(i * main_grass_jump, 0,-j * main_grass_jump))
```

## (intermission / revision)

with the roblox maze, i found it "nice" to work from examples i could see - even if i then needed script to remove those aids

for this ... for this; i'm doing the same thing.

i've dropped in three maze cells, and, the links int eh editor

i'll compute their offsets at launch

...


i wish that i could inspect the scene at runtime

... and hide code like roblox natively does ...

## cell links

i once again noticed a problem WHEN i cloned things after i started duplicating them

solution; grab them all at the start of the cloning

...

no ... okay; no this didn't work

...

let's get the WASD going so that i can get a better view

# WASD player

need/want to move around in 3d

## walk on air

re-parented the camera to a new blacnk Spatial

adjustled transform

pulled it out to a separate scene/prefab



i'll need something to give me some perspective ... so;
- added a grass block
- if this node is the ROOT of the scene; we're in the debug prefab and the grass node should be set as an indepdant
- if this node is a child; delete the grass node

... so ... let's grab that script!

... hmm ... needs a double-dip ...

```
	if null == get_parent().get_parent():
		print('i am root')
	else:
		print('i am baby')
```

... but that works ...

... but no ... okay ... no





let's see what the move stuff does

i added a "foot" node and put the camera on that (sorry)

i adjusted the transforms (again) and think that i'm happy like this

some instructions here; https://docs.godotengine.org/en/stable/getting_started/first_3d_game/02.player_input.html

i just resued `ui_up` et al

... neeat!


### fix cell links


with the/a orignal "snag" fixed, it's time to do the maze fixies

looks like ... the links aren't being spawned correctly

...

i wanted to use a sub function, like ...

```gd
func link_up(i, j):
	...
```

... but that;s not a thing in this version ...

i'm going to use ... more variables

...

okay; with *just* one link ... it;s still in the worng place


but; removing the link-jump works with that ... and with everything.

okay ... but; there's still an outer edge

...

so current;

```
	#
	# joing everything
	for i in maze_size:
		if i > 0:
			for j in maze_size:
				if j > 0:
					var offset = ((i - 1) * cellJumpX) + ((j - 1) * cellJumpZ)
					
					var do_x = true
					var do_z = true
					
					if do_x:
						var x = linkX.duplicate()
						x.translate(offset)
						add_child(x)
					if do_z:
						var z = linkZ.duplicate()
						z.translate(offset)
						add_child(z)
```

... this is fine. actually.

this is a bug with my democode, but, fixing it won't help with the final maze

i'm going to delete all this eventually.

... so ... so i'm going to do the/a maze path next


## maze path


i can create a dictionary literal simply enough

i can also create a cell structure

so ... so ... hmm

i can run an explore method on each cell

if the cell has been visited; VOMIT

now we're explored

randomly explore on each neighbor.
	if the neighbor isn't vistied; link and explore


how ... how to random order?
```
	func draw(from):
		var take = randi() % from.size()
		var item = from[take]
		from.remove(take)
		return item
```

... or ...

```
var next = todo.pop_at(randi() % todo.size())
```

so now ... now i travel the ocean blue

```
while !todo.empty():
	var next = todo.pop_at(randi() % todo.size())
	
	# gotta do teh skip here because they might be modified recursively
	if !next.seen:
		print(str(next.i) + ", " + str(next.j))
		next.explore()
```


instead of println i need to makr them as linked

if i == i
	if this.j < next.j
		this.z_do = true
	else
		next.z_do = true

... okay; that works, but, i need to remove the i-1 and j-1 from link ofrfset calcualtions.

moving on ... let's copy it to/for the/a x links

... oh, and; properly randomise the numbers

## walk on maze


i had wanted to avoid using physics ... but ... it's easiest

in defernce to tradtion; i'm going to use walls around the maze, but, make them invisible

so i need a physics 3d character thing

### physical player

https://docs.godotengine.org/en/stable/getting_started/first_3d_game/03.player_movement_code.html

???


<<<<<<< working copy
### maze walls

???

### physics bro

???
=======
>>>>>>> merge rev

# gratz screen

???
