<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multi-Threading on Peter&#39;s Notebook</title>
    <link>https://peterlavalle.github.io/tags/multi-threading/</link>
    <description>Recent content in Multi-Threading on Peter&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Wed, 08 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://peterlavalle.github.io/tags/multi-threading/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(Scala) Delay Run</title>
      <link>https://peterlavalle.github.io/post/delay-run/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://peterlavalle.github.io/post/delay-run/</guid>
      <description>I wrote a threading primitive and I&amp;rsquo;m very pleased with it. I plan to wrap all of my &amp;ldquo;save file&amp;rdquo; things in this, from now on.
Delay Run This class acts as a sort of &amp;ldquo;once inactive for X do Y&amp;rdquo; pattern. In my design, I&amp;rsquo;m wrapping my save actions in it and triggering schedule() after practically every edit.
The class is passed a delay: Long value to specify how long to actually wait - I&amp;rsquo;m using 1.</description>
    </item>
    
    <item>
      <title>Pipe Sink</title>
      <link>https://peterlavalle.github.io/post/pal-pipe-sink/</link>
      <pubDate>Thu, 03 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://peterlavalle.github.io/post/pal-pipe-sink/</guid>
      <description>I had an idea/desire for a &amp;ldquo;simple&amp;rdquo; template class that&amp;rsquo;d work as my OpenGL thread. A contemporary design for multi-threaded 3D games10 seems to be pooling work and processing it in whatever threads are available. IME OpenGL/GLFW are not re-entrant; Apple2 and GLFW3 explicitly states that it won&amp;rsquo;t work - so it seems safe to assume that I shouldn&amp;rsquo;t call functions from different threads. So to make a super-fast 3D game (or whatever) I need to do less work on the thread which is running OpenGL while allowing other threads to send it whatever work they please.</description>
    </item>
    
  </channel>
</rss>