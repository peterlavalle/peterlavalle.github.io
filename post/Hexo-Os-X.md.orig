---
title: Hexo and Jenkins atop Os X
date: 2016-02-10 00:00:00
tags:
 - Hexo
 - Jenkins
 - HowTo
---

In which I ramble a bit about setting up CI for this very blog.

I have a [Jenkins][orgJenkins] server running on my OsX computer.
(... or ... I'm setting one up anyway)
I also have (am establishing?) a blog built by [Hexo][ioHexo] ... because that seems the right way to do this sort of thing.
My constraints of "[MarkDown][netMarkDown]" and "no really - let me use [MarkDown][netMarkDown] because I'm going to have a lot of code fragments" seem alien to most blogging software - "[Hexo][ioHexo] delivers" as the kids say.

I knew that this would all work from a command line on the computer and a command line on my Windows 7 PC.
After a bunch of chewing - I've scrawled this post in victory as a sort of test.

# NPM setup

Hexo is built in Node.JS.
I installed it and played about with it as I was instructed.

``` bash
npm install hexo
npm install hexo-generator-sitemap --save
```

After installing Node.JS I encountered various errors and I switching to a stable version of NPM.
(... which I thought I had already used but ... I guess not)

``` bash
npm -g install npm
```

This was [discussed here](https://github.com/npm/npm/issues/7555) but may be irrelevant.

# The Build

I setup [Jenkins][orgJenkins] to poll (and pull) my repository at `H/15 * * * *`.
I had already setup a [Hexo][ioHexo] site and configured it to deploy to GitHub pages.
(... which incidentally don't seem to do anything interesting for you with Jekyll AFAIK)

The "secret" to this recipe seemed to be that the [Jenkins][orgJenkins] build seems to require installing  [Hexo][ioHexo] itself to work.
Not *just* `npm install` in the folder but full-on `npm install hexo` et al.
This seems odd to me but it's what worked ... but this is a CI server so longish builds are fine with me.

I used four steps, each a shell command, to perform the generation and **deploy** the site.

The first command installs [Hexo][ioHexo].
I tried to install it (globally?) with `-g` but encountered a security exception.
``` bash
npm install hexo
```



The second command installs a sitemap plugin that should make my site reachable from Google-like crawlers
``` bash
npm install hexo-generator-sitemap --save
```


The third command ... installs ... the site?
This may be redundant but I'm not interested in going through a *"change" > "reboot" > "check"* cycle to learn that I've broken my configuration.
``` bash
npm install
```

The fourth command actually generates the site and uploads the generated site.
It seems odd to me `deploy` doesn't implicitly generate the site - but I can take advantage of that, see the Addendum!
``` bash
hexo deploy --generate
```

# Conclusion

So ... yeah ... that's that.
This post was the first one that I set to push out through this system.

# Addendum

So it's been a few weeks/months and I want to stick generated HTML from somewhere else onto my site.
But ... Hexo tries to "fill in the blanks" which keeps a consistent CSS and `<title>` stuff ... but breaks [my Unity WebGL game](mySpaceShips).
To work around this, I've
* generated the WebGL to an `assets/` folder and committed it to the blog's repository
	* an explanation of this is beyond the scope of this post ... I'll write it up another time
* split generation and deployment into two steps
* copied the `assets/` folder into the blog's `public/` folder
* deployed everything as normal

The fourth step above is replaced with these three commands;

``` bash
hexo generate
cp -r assets/* public/
hexo deploy
```
... and it works!

[mySpaceShips]: http://peterlavalle.com/game-SpaceShips/
[orgJenkins]: https://jenkins-ci.org/
[ioHexo]: https://hexo.io/
[netMarkDown]: https://daringfireball.net/projects/markdown/
