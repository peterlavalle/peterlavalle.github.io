<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Procedural Generation on Peter&#39;s Notebook</title>
    <link>https://peterlavalle.github.io/tags/procedural-generation/</link>
    <description>Recent content in Procedural Generation on Peter&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sat, 12 Nov 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://peterlavalle.github.io/tags/procedural-generation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PAL-System</title>
      <link>https://peterlavalle.github.io/post/palsystem/</link>
      <pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://peterlavalle.github.io/post/palsystem/</guid>
      <description>Lindenmayer Systems allow one to specify a series of replacement rules for transforming strings.
If the text is used as a series of drawing commands, including saving and restoring the cursor&amp;rsquo;s position, the technique can generate fairly interesting foliage.
A scene graph offers the ability to save/restore by chaining segments together. I used Unity3D&amp;rsquo;s ScriptableObject to create &amp;ldquo;Languages&amp;rdquo; with replacement rules. I also created &amp;ldquo;Dictionaries&amp;rdquo; mapping symbols to segments made from GameObject prefabs.</description>
    </item>
    
  </channel>
</rss>